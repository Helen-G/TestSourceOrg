<apex:page sidebar="false" standardStylesheets="false" controller="MUSW.GISAppController" action="{!init}" showHeader="false" applyHtmlTag="false" title="BasicGov Maps" docType="html-5.0">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        <title>BasicGov Web Application</title>
        <link rel="shortcut icon" href="{!resourceUrl}/images/shortcut.png"/>
        <style type="text/css">
            body,html {
              width:100%;
              height:100%;
              margin:0;
              padding:0;
              overflow:hidden;
              font-family: 'Open Sans', Helvetica, Arial;
            }
            #main-loading{
                width: 100%;
                height: 100%;
                background-color: #344357;
                text-align: center;
                overflow: hidden;

            }
            #main-loading .app-name{
                font: 36px arial;
                font-weight: bold;
                position: absolute;
                left: 50%;
                top: 50%;
                margin-left: -204px;
                margin-top: -135px;
                z-index: 2;
            }
            #main-loading img{
                position: relative;
                top: 34%;
                height: 275px;
                display: block;
                margin: auto;
            }
            #main-loading .loading-info{
                font: 14px 'arial';
                margin-top: 50px;
                overflow: hidden;
                position: relative;
                top: 34%;
            }
            #main-loading .loading-info .loading{
                width: 260px;
                height: 4px;
                border-radius: 2px;
                background-color: #192330;
                margin: auto;
            }
            #main-loading .loading-info .loading-progress{
                height: 4px;
                border-radius: 2px;
                background-color: white;
            }

            #main-page{
                display: none;
                width: 100%;
                height: 100%;
                position: relative;
            }

            #jimu-layout-manager{
                width: 100%;
                height: 100%;
                position: absolute;
            }
        </style>
    </head>
    
    <body class="claro">
        <div id="main-loading">
            <div class="app-name">
                <span style="color:white">ArcGIS Web Application</span>
            </div>
            <img src="{!resourceUrl}/images/loading.gif"/>
            <div class="loading-info">
                <div class="loading"></div>
            </div>
        </div>
        <div id="main-page">
            <div id="jimu-layout-manager"></div>
        </div>
        <script>
            var realPath = "{!resourceUrl}/";
        </script>
        <script src="{!resourceUrl}/env.js"></script>
        <script src="{!resourceUrl}/jimu.js/simpleLoader.js"></script>
        <script src="{!resourceUrl}/init.js"></script> 
        <script>
            var realPath = "{!resourceUrl}/"
            var currentUserId = '{!$User.Id}';
            
            //set parameter for auto zoom
            var defaultZoomLevel = "{!$CurrentPage.parameters.defaultZoom}";
            if (defaultZoomLevel == "null" || defaultZoomLevel == "") defaultZoomLevel = 16;
            else defaultZoomLevel = parseInt(defaultZoomLevel);
            
            var defaultScaleLevel = "{!$CurrentPage.parameters.defaultScale}";
            if (defaultScaleLevel == "null" || defaultScaleLevel == "") defaultScaleLevel = 72223.819286;
            else defaultScaleLevel = parseFloat(defaultScaleLevel);
            
            var zoomOnLoad = '{!zoomOnLoad}';
            var zoomParcelName = '';
            var zoomObjects = [];
            if(zoomOnLoad == 'true')
            {
                zoomParcelName = '{!zoomParcelName}';
                if(zoomParcelName == '')
                {                    
                    var zoomObject = '{!zoomObjectVO}';
                    zoomObjects.push('bgDefaultObjectToZoom');
                    zoomObjects.push(JSON.parse(zoomObject));
                }
            }
            
            //This map is use to prevent we subscribe the same topic for the same function multiple times
            var dojoSubscribersMap = {};
            function BGManager (){
                this.getListViewsLayerList = function (objNames){ 
                    GISAppController.getListViews(objNames, function(result, event){
                        if(event.status){
                            dojo.publish('listViews_layerList', [result]);                        
                        } else if (event.type === 'exception') {
                            var self = new BGManager();
                            self.getListViewsLayerList(objNames);
                        }
                    });  
                };
                this.getAllUsersLayerList = function (){ 
                    GISAppController.getAllUsers(function(result, event){
                        if(event.status){
                            dojo.publish('allUsers_layerList', [result]);                        
                        } else if (event.type === 'exception') {
                            var self = new BGManager();
                            self.getAllUsersLayerList();
                        }
                    });  
                };
                this.assignToUserLayerList = function (objId, userId){ 
                    GISAppController.assignToUser(objId, userId,function(result, event){
                        if(event.status){
                            dojo.publish('assignToUser_layerList', 'Succeed');                        
                        } else if (event.type === 'exception') {
                            dojo.publish('assignToUser_layerList', event.message);  
                        }
                    });  
                };
                this.getListViewsSearch = function (objNames){ 
                    GISAppController.getListViews(objNames, function(result, event){
                        if(event.status){
                            dojo.publish('listViews_search', [result]);                        
                        } else if (event.type === 'exception') {
                            var self = new BGManager();
                            self.getListViewsSearch(objNames);
                        }
                    });  
                };
                this.getAllUsersSearch = function (){ 
                    GISAppController.getAllUsers(function(result, event){
                        if(event.status){
                            dojo.publish('allUsers_search', [result]);                        
                        } else if (event.type === 'exception') {
                            var self = new BGManager();
                            self.getAllUsersSearch();
                        }
                    });  
                };
                this.assignToUserSearch = function (objId, userId){ 
                    GISAppController.assignToUser(objId, userId,function(result, event){
                        if(event.status){
                            dojo.publish('assignToUser_search', 'Succeed');                        
                        } else if (event.type === 'exception') {
                            dojo.publish('assignToUser_search', event.message);  
                        }
                    });  
                };
                this.getListViewResults = function (objName, lvLabel){
                    GISAppController.getListViewResults(objName, lvLabel, function(result, event){
                        if(event.status){
                            //Use as Id to create graphic layer 
                            result.unshift(objName+'_'+lvLabel);
                            dojo.publish('listViewResults_'+objName+'_'+lvLabel, [result]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getListViewResults(objName, lvLabel);
                            } else
                            {
                                dojo.publish('listViewResults_'+objName+'_'+lvLabel, 'Exception:' + event.message);
                            }
                        }
                    });
                };
                /*This function is deprecated, for BG graphic search, we get all results and filter in the client side */  
                this.getSearchResults = function (jsonStr, searchType, objName, lvLabel){
                    GISAppController.searchGraphic(jsonStr, searchType, objName, lvLabel, function(result, event){
                        if(event.status){
                            //Use as Id to create graphic layer 
                            result.unshift(objName+'_'+lvLabel+'_bgSearch');
                            console.debug('*** Return Results');
                            console.dir(result);
                            dojo.publish('searchResults_'+objName+'_'+lvLabel, [result]);
                        } 
                    });
                };
                this.getSearchResultsText = function (text, objName, lvLabel){
                    GISAppController.searchText(text, objName, lvLabel, function(result, event){
                        if(event.status){
                            //Use as Id to create graphic layer 
                            result.unshift(objName+'_'+lvLabel+'_bgSearchText');
                            console.debug('*** Return Results');
                            console.dir(result);
                            dojo.publish('searchResultsText_'+objName+'_'+lvLabel, [result]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getSearchResultsText(text, objName, lvLabel);
                            } else
                            {
                                dojo.publish('searchResultsText_'+objName+'_'+lvLabel, 'Exception:' + event.message);
                            }
                        }
                    });
                };

                /*This function is deprecated, for BG nearby search, we get all results and filter in the client side */       
                this.getBufferSearchResultsInSearchWidget = function (objName, lvLabel, lat, lon){
                    GISAppController.getNearby(objName, lvLabel, lat, lon, function(result, event){
                        if(event.status){
                            //Use as Id to create graphic layer 
                            result.unshift(objName+'_'+lvLabel+'_bgBufferSearchInSearchWidget');
                            console.debug('*** Return Results');
                            console.dir(result);
                            dojo.publish('bufferSearchResults_search'+objName+'_'+lvLabel, [result]);
                        }
                    });
                };
                
                this.getAllResultsFromSearch = function (objName, lvLabel){
                    GISAppController.getListViewResults(objName, lvLabel, function(result, event){
                        if(event.status){
                            //Use as Id to create graphic layer 
                            result.unshift(objName+'_'+lvLabel+'_bgSearch');
                            dojo.publish('allBGRecords_'+objName+'_'+lvLabel, [result]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getAllResultsFromSearch(objName, lvLabel);
                            } else
                            {
                                dojo.publish('allBGRecords_'+objName+'_'+lvLabel, 'Exception:' + event.message);
                            }
                        }
                    });
                };
                                            
                this.getAllResultsLayerList = function (objName, lvLabel){
                    GISAppController.getListViewResults(objName, lvLabel, function(result, event){
                        if(event.status){
                            //Use as Id to create graphic layer 
                            result.unshift(objName+'_'+lvLabel+'_bgBufferSearchLayerList');
                            dojo.publish('bufferSearchResults_layerList'+objName+'_'+lvLabel, [result]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getAllResultsLayerList(objName, lvLabel);
                            } else
                            {
                                dojo.publish('bufferSearchResults_layerList'+objName+'_'+lvLabel, 'Exception:' + event.message);
                            }
                        }
                    });
                }; 
               
                this.getToken = function (){
                   GISAppController.getToken(function(result, event){
                         console.debug('*** getToken result: ' + result);
                         if(event.status && result != null){
                             dojo.publish('bgSecurityToken', [result]);
                         }
                         if(event.type === 'exception') {
                             //TO Do here to handle exception
                            var self = new BGManager();
                            self.getToken();
                         }
                    });
               }; 
            }
            /*This is the code for test.
            var objectNames = ['MUSW__Parcel__c','MUSW__Permit2__c'];

            function getObjectListView(objNames){
                GISAppController.getListViews(objNames, function(result, event){
                    if(event.status){
                        console.debug('*** ListViews');
                        console.dir(result);
                    }
                });
            }
            var listViewMap = getObjectListView(objectNames);
            function getObjectListViewResults(objName,lvLabel){
                GISAppController.getListViewResults(objName, lvLabel, function(result, event){
                    if(event.status){
                        console.debug('*** Parcel results');
                        console.dir(result);
                    }
                });
            }
            var listViewResult = getObjectListViewResults('MUSW__Parcel__c', 'TestParcel1');
            function getSearchResults(jsonStr, searchType, objName,lvLabel){
                GISAppController.searchGraphic(jsonStr, searchType, objName, lvLabel, function(result, event){
                    if(event.status){
                        console.debug('*** Search results');
                        console.dir(result);
                    }
                });
            }
            var onePoint = [[90,60]];
            var searchResult = getSearchResults(onePoint, 'Point','MUSW__Parcel__c', 'TestParcel1');*/
        </script>
    </body>
</html>
</apex:page>